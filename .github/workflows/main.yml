name: Infrastructure Deployment

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [main, dev]
    paths-ignore:
      - "**/README.md"
      - "**/readme.md"
      - "doc/**/*.md"

concurrency:
  group: infra-${{ github.ref }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}
    env:
      MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      AWS_VPC_ID: ${{ secrets.AWS_VPC_ID }}
      AWS_SUBNET_PRIMARY: ${{ secrets.AWS_SUBNET_PRIMARY }}
      AWS_ZONE_PRIMARY: ${{ secrets.AWS_ZONE_PRIMARY }}
      AWS_SUBNET_SECONDARY0: ${{ secrets.AWS_SUBNET_SECONDARY0 }}
      AWS_ZONE_SECONDARY0: ${{ secrets.AWS_ZONE_SECONDARY0 }}
      AWS_SUBNET_SECONDARY1: ${{ secrets.AWS_SUBNET_SECONDARY1 }}
      AWS_ZONE_SECONDARY1: ${{ secrets.AWS_ZONE_SECONDARY1 }}
      AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}
      GIT_REPOSITORY_URL: https://github.com/neu-dsg/dailp-encoding
      OAUTH_TOKEN: ${{ secrets.OAUTH_TOKEN }}
      RUST_LOG: info
      TF_STAGE: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            backend:
              - 'types/**'
              - 'graphql/**'
              - 'flake.nix'
              - 'flake.lock'
              - 'terraform/**'
            data:
              - 'types/**'
              - 'migration/**'
              - 'graphql/**'
            rust:
              - '**/*.rs'
              - 'Cargo.lock'
      - name: Install Nix
        uses: cachix/install-nix-action@v13
        with:
          install_url: https://nixos-nix-install-tests.cachix.org/serve/lb41az54kzk6j12p81br4bczary7m145/install
          install_options: "--tarball-url-prefix https://nixos-nix-install-tests.cachix.org/serve"
          extra_nix_config: |
            experimental-features = nix-command flakes
      - name: Use binary cache for nix store
        uses: cachix/cachix-action@v10
        with:
          name: dailp
          # If you chose API tokens for write access OR if you have a private cache
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          pushFilter: "(-dailp$|-dailp-|-terraform-config$|-source$|\\.tar\\.gz$|-output$|-plan$|-apply-now$|-apply$)"
      - name: Add public IP to AWS security group
        uses: sohelamin/aws-security-group-add-ip-action@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          aws-security-group-id: ${{ secrets.AWS_DEPLOYMENT_SECURITY_GROUP }}
          port: "22"
          to-port: "22"
          protocol: "tcp"
      - name: Build and test project
        # nix -L argument shows the full build log and --impure allows it to access environment variables.
        run: |
          nix build --impure -L
          cp -f ./result/config.tf.json ./config.tf.json
      - name: Deploy back-end to AWS via terraform
        run: nix develop --impure --command apply-now
      - name: Encode documents as TEI and database entries
        if: steps.filter.outputs.data == 'true'
        run: |
          export DAILP_GRAPHQL_URL=$(nix develop --impure --command output functions_url)/graphql
          nix run .#migrate-data -L
      - name: Publish website
        run: |
          curl -X POST -d {} "$(nix develop --impure --command output amplify_webhook)" -H "Content-Type:application/json"
