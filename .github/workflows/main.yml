# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [main]
    paths-ignore:
      - "**/README.md"
      - "**/readme.md"
      - "doc/**/*.md"

env:
  MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
  MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
  GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
  AWS_VPC_ID: ${{ secrets.AWS_VPC_ID }}
  AWS_SUBNET_PRIMARY: ${{ secrets.AWS_SUBNET_PRIMARY }}
  AWS_SUBNET_SECONDARY0: ${{ secrets.AWS_SUBNET_SECONDARY0 }}
  AWS_SUBNET_SECONDARY1: ${{ secrets.AWS_SUBNET_SECONDARY1 }}
  GIT_REPOSITORY_URL: https://github.com/neu-dsg/dailp-encoding
  OAUTH_TOKEN: ${{ secrets.OAUTH_TOKEN }}
  RUST_LOG: info

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache Cargo Dependencies
        uses: actions/cache@v1
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
            ${{ runner.os }}-cargo
      - name: Setup node.js
        uses: actions/setup-node@v1
        with: { node-version: 10 }
      - name: Setup rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          default: true
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'types/**'
              - 'graphql/**'
              - 'serverless.yml'
              - 'cf-templates/**'
            data:
              - 'types/**'
              - 'migration/**'
              - 'graphql/**'
            rust:
              - '**/*.rs'
              - 'Cargo.lock'
      - name: Cache docker images
        uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
      - name: Run unit tests
        if: steps.filter.outputs.rust == 'true'
        run: cargo test --release
      - name: Install NPM dependencies
        run: |
          yarn install
          mkdir -p .serverless
      - name: Deploy back-end to AWS via serverless
        if: steps.filter.outputs.backend == 'true'
        run: |
          cargo install cross
          yarn deploy-graphql
      - name: Encode documents as TEI and database entries
        if: steps.filter.outputs.data == 'true'
        run: |
          yarn sls translate --stage prod
          yarn sls manifest --stage prod
          export DAILP_GRAPHQL_URL=$(jq -r '.prod.urls.byFunction.graphql.url' .serverless/manifest.json)
          cd migration
          cargo run --release
      - name: Publish website
        run: |
          curl -X POST -d {} ${{ secrets.BUILD_WEBHOOK }}
