name: Terraform Plan
on:
  pull_request:
    branches: [main]
jobs:
  plan:
    runs-on: ubuntu-20.04
    env:
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      AWS_VPC_ID: ${{ secrets.AWS_VPC_ID }}
      AWS_SUBNET_PRIMARY: ${{ secrets.AWS_SUBNET_PRIMARY }}
      AWS_ZONE_PRIMARY: ${{ secrets.AWS_ZONE_PRIMARY }}
      AWS_SUBNET_SECONDARY0: ${{ secrets.AWS_SUBNET_SECONDARY0 }}
      AWS_SUBNET_SECONDARY1: ${{ secrets.AWS_SUBNET_SECONDARY1 }}
      GIT_REPOSITORY_URL: https://github.com/neu-dsg/dailp-encoding
      OAUTH_TOKEN: ${{ secrets.OAUTH_TOKEN }}
      RUST_LOG: info
      TF_STAGE: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Nix
        uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=channel:nixos-21.11
      - name: Use binary cache for nix store
        uses: cachix/cachix-action@v12
        with:
          name: dailp
          # If you chose API tokens for write access OR if you have a private cache
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          pushFilter: "(-dailp$|-dailp-|-terraform-config$|-source$|\\.tar\\.gz$|-output$|-plan$|-apply-now$|-apply$)"
      - name: Check code quality
        run: |
          echo "::group::Checking Rust format"
          cargo install cargo-fmt
          cargofmt="$(cargo fmt --check)"
          if [[ -n $cargofmt ]]; then
            echo $cargofmt
            echo "Please fix the formatting errors above by running 'cargo fmt'."
            exit 1
          fi
          echo "::endgroup"
          echo "::group::Checking format for frontend code"
          cd website
          yarn add prettier@2.1.2 --dev
          yarn prettier -c --config package.json src
          echo "::endgroup"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Build and test back-end
        run: nix run --impure -L .#tf-plan
