name: Terraform Plan
on:
  workflow_dispatch:
  pull_request:
    branches: [main]
    paths:
      - "types/**"
      - "migration/**"
      - "graphql/**"
      - "**.nix"
      - "*.toml"
      - "flake.lock"
      - "Cargo.lock"
jobs:
  plan:
    runs-on: ubuntu-20.04
    environment: ${{ github.base_ref == 'main' && 'Development' || 'Production' }}
    env:
      TF_VAR_database_password: ${{ secrets.DATABASE_PASSWORD }}
      TF_VAR_aws_vpc_id: ${{ secrets.AWS_VPC_ID }}
      TF_VAR_aws_subnet_primary: ${{ secrets.AWS_SUBNET_PRIMARY }}
      TF_VAR_aws_zone_primary: ${{ secrets.AWS_ZONE_PRIMARY }}
      TF_VAR_aws_subnet_secondary0: ${{ secrets.AWS_SUBNET_SECONDARY0 }}
      TF_VAR_aws_zone_secondary0: ${{ secrets.AWS_ZONE_SECONDARY0 }}
      TF_VAR_aws_subnet_secondary1: ${{ secrets.AWS_SUBNET_SECONDARY1 }}
      TF_VAR_aws_zone_secondary1: ${{ secrets.AWS_ZONE_SECONDARY1 }}
      TF_VAR_aws_ssh_key: ${{ secrets.AWS_SSH_KEY }}
      TF_VAR_git_repository_url: https://github.com/neu-dsg/dailp-encoding
      TF_VAR_github_oauth_token: ${{ secrets.OAUTH_TOKEN }}
      TF_VAR_deployment_stage: ${{ github.base_ref == 'main' && 'dev' || 'prod' }}
      TF_VAR_cluster_join_token: ${{ secrets.HERCULES_CLUSTER_JOIN_TOKEN }}
      RUST_LOG: info
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Nix
        uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-21.11
          extra_nix_config: |
            experimental-features = nix-command flakes
      - name: Use binary cache for nix store
        uses: cachix/cachix-action@v10
        with:
          name: dailp
          # If you chose API tokens for write access OR if you have a private cache
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          pushFilter: "(-dailp$|-dailp-|-terraform-config$|-source$|\\.tar\\.gz$|-output$|-plan$|-apply-now$|-apply$)"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Build and test back-end
        run: nix run --impure -L .#tf-plan
