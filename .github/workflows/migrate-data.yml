name: Migrate Data
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-20.04
    environment: Development
    env:
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      AWS_VPC_ID: ${{ secrets.AWS_VPC_ID }}
      AWS_SUBNET_PRIMARY: ${{ secrets.AWS_SUBNET_PRIMARY }}
      AWS_ZONE_PRIMARY: ${{ secrets.AWS_ZONE_PRIMARY }}
      AWS_SUBNET_SECONDARY0: ${{ secrets.AWS_SUBNET_SECONDARY0 }}
      AWS_ZONE_SECONDARY0: ${{ secrets.AWS_ZONE_SECONDARY0 }}
      AWS_SUBNET_SECONDARY1: ${{ secrets.AWS_SUBNET_SECONDARY1 }}
      AWS_ZONE_SECONDARY1: ${{ secrets.AWS_ZONE_SECONDARY1 }}
      AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}
      GIT_REPOSITORY_URL: https://github.com/neu-dsg/dailp-encoding
      OAUTH_TOKEN: ${{ secrets.OAUTH_TOKEN }}
      RUST_LOG: info
      TF_STAGE: dev
      SQLX_OFFLINE: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Nix
        uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-21.11
          extra_nix_config: |
            experimental-features = nix-command flakes
      - name: Use binary cache for nix store
        uses: cachix/cachix-action@v10
        with:
          name: dailp
          # If you chose API tokens for write access OR if you have a private cache
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          pushFilter: "(-dailp$|-dailp-|-terraform-config$|-source$|\\.tar\\.gz$|-output$|-plan$|-apply-now$|-apply$)"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Add public IP to AWS security group
        uses: sohelamin/aws-security-group-add-ip-action@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          aws-security-group-id: ${{ secrets.AWS_DEPLOYMENT_SECURITY_GROUP }}
          port: 27017
          to-port: 27017
          protocol: tcp
      - name: Build project
        run: |
          nix build --impure -L
      - name: Migrate data to MongoDB
        run: |
          nix run --impure -L .#tf-plan
          export DAILP_API_URL=$(nix run --impure .#tf-output functions_url)
          export MONGODB_URI=mongodb://$(nix run --impure .#tf-output mongodb_primary_ip):27017
          export DATABASE_URL=postgres://dailp:$DATABASE_PASSWORD@$(nix run --impure .#tf-output database_endpoint)/dailp
          nix run --impure -L .#migrate-data
      - name: Publish website
        run: |
          curl -X POST -d {} "$(nix run --impure .#tf-output amplify_webhook)" -H "Content-Type:application/json"
