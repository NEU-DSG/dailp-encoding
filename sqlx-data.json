{
  "db": "PostgreSQL",
  "0004c050a9007c9f1ca0f6731433b9c756632da10d5e513d3dcbcbbdd1ec8811": {
    "describe": {
      "columns": [
        {
          "name": "full_name",
          "ordinal": 0,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "TextArray"
        ]
      }
    },
    "query": "select full_name\nfrom contributor\nwhere full_name = any($1)\n"
  },
  "0059a524d1966fe179b81afdf27abe1206e98d5dbd342f95fefe7449e663a89d": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "select id\nfrom document\nwhere short_name = $1\n"
  },
  "05ee7b3db39b837428beaf795a2f9690e5a3e3f102d01dc13b6ddd727000eaf7": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "short_name",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "title",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "written_at",
          "ordinal": 3,
          "type_info": "Date"
        },
        {
          "name": "is_reference",
          "ordinal": 4,
          "type_info": "Bool"
        },
        {
          "name": "bookmarked_on?",
          "ordinal": 5,
          "type_info": "Date"
        },
        {
          "name": "contributors",
          "ordinal": 6,
          "type_info": "Jsonb"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        true,
        false,
        false,
        null
      ],
      "parameters": {
        "Left": []
      }
    },
    "query": "select\n  document.id,\n  document.short_name,\n  document.title,\n  document.written_at,\n  document.is_reference,\n  ubd.bookmarked_on as \"bookmarked_on?\",\n  coalesce(\n    jsonb_agg(\n      jsonb_build_object(\n        'name',\n        contributor.full_name,\n        'role',\n        contributor_attribution.contribution_role\n      )\n    ) filter (where contributor is not null),\n    '[]'\n  )\n  as contributors\nfrom document\n  left join\n    contributor_attribution on contributor_attribution.document_id = document.id\n  left join contributor on contributor.id = contributor_attribution.contributor_id\n  left join user_bookmarked_document as ubd on ubd.document_id = document.id\ngroup by\n  document.id, \n  ubd.bookmarked_on\n"
  },
  "06b8461f89e4dc227c28b2fa754688c67ec2cdb8dfc3f82d34002bf24b886d3d": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "delete from collection_chapter\nwhere collection_slug = $1;\n"
  },
  "0a7e8a0aaa1382daa8686211d2e0469e86cf302d41a282643266908e93179718": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "page_id",
          "ordinal": 1,
          "type_info": "Uuid"
        },
        {
          "name": "character_range",
          "ordinal": 2,
          "type_info": "Int8Range"
        },
        {
          "name": "english_translation",
          "ordinal": 3,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "UuidArray"
        ]
      }
    },
    "query": "select *\nfrom paragraph\nwhere page_id = any($1)\norder by character_range asc\n"
  },
  "0c697fa7d3e8459a4577e54b76a3b17bf1c872d3aa5cecb7a585d1b664261350": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Uuid",
          "Text",
          "Text",
          "Uuid"
        ]
      }
    },
    "query": "insert into morpheme_gloss (document_id, gloss, example_shape, tag_id)\n  values ($1, $2, $3, $4)\non conflict (coalesce(document_id, uuid_nil()), gloss)\n  do update set example_shape = excluded.example_shape,\n     tag_id = excluded.tag_id\nreturning id\n"
  },
  "1dcec22261dae61c4404af7c630eb24e3cd2acc5b4717bcc9706f14c6dde7efc": {
    "describe": {
      "columns": [
        {
          "name": "document_id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "is_reference",
          "ordinal": 1,
          "type_info": "Bool"
        },
        {
          "name": "id",
          "ordinal": 2,
          "type_info": "Uuid"
        },
        {
          "name": "source_text",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "simple_phonetics",
          "ordinal": 4,
          "type_info": "Text"
        },
        {
          "name": "phonemic",
          "ordinal": 5,
          "type_info": "Text"
        },
        {
          "name": "english_gloss",
          "ordinal": 6,
          "type_info": "Text"
        },
        {
          "name": "recorded_at",
          "ordinal": 7,
          "type_info": "Date"
        },
        {
          "name": "commentary",
          "ordinal": 8,
          "type_info": "Text"
        },
        {
          "name": "index_in_document",
          "ordinal": 9,
          "type_info": "Int8"
        },
        {
          "name": "page_number",
          "ordinal": 10,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false,
        true,
        true,
        true,
        true,
        true,
        false,
        true
      ],
      "parameters": {
        "Left": [
          "Text",
          "Uuid"
        ]
      }
    },
    "query": "select\n  document.id as document_id,\n  document.is_reference,\n  word.id,\n  word.source_text,\n  word.simple_phonetics,\n  word.phonemic,\n  word.english_gloss,\n  word.recorded_at,\n  word.commentary,\n  word.index_in_document,\n  word.page_number\nfrom word\n  inner join document on document.id = word.document_id\n  left join word_segment on word_segment.word_id = word.id\n  inner join morpheme_gloss on morpheme_gloss.id = word_segment.gloss_id\nwhere morpheme_gloss.gloss = $1\n  and (word.document_id = $2 or $2 is null)\ngroup by document.id, word.id\norder by document.id\n"
  },
  "2874ae8f9cec1ce09c268adc74b096a15ca1d90cbb324289c679df9e451cb2ee": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Uuid"
        ]
      }
    },
    "query": "-- Delete all document pages, which will cascade to delete all associated\n-- paragraphs and words.\ndelete from document_page\nwhere document_id = $1\n"
  },
  "2dbab3e84c02adad2c49a975de61a4ae53c4924d59f697720a7f7e5beb451617": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Uuid"
        ]
      }
    },
    "query": "-- delete a comment given its ID\ndelete from comment where id = $1 returning id;"
  },
  "32052923a631af8b0a51564e9d08578fc30b5d0e58b1593e8651f53343c91156": {
    "describe": {
      "columns": [
        {
          "name": "morpheme",
          "ordinal": 0,
          "type_info": "Text"
        },
        {
          "name": "word_id",
          "ordinal": 1,
          "type_info": "Uuid"
        },
        {
          "name": "source_text",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "simple_phonetics",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "phonemic",
          "ordinal": 4,
          "type_info": "Text"
        },
        {
          "name": "english_gloss",
          "ordinal": 5,
          "type_info": "Text"
        },
        {
          "name": "commentary",
          "ordinal": 6,
          "type_info": "Text"
        },
        {
          "name": "document_id",
          "ordinal": 7,
          "type_info": "Uuid"
        },
        {
          "name": "index_in_document",
          "ordinal": 8,
          "type_info": "Int8"
        },
        {
          "name": "page_number",
          "ordinal": 9,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        true,
        true,
        true,
        true,
        false,
        false,
        true
      ],
      "parameters": {
        "Left": [
          "Text",
          "Text"
        ]
      }
    },
    "query": "select\n  word_segment.morpheme,\n  word.id as word_id,\n  word.source_text,\n  word.simple_phonetics,\n  word.phonemic,\n  word.english_gloss,\n  word.commentary,\n  word.document_id,\n  word.index_in_document,\n  word.page_number\nfrom morpheme_gloss\n  inner join document on document.id = morpheme_gloss.document_id\n  left join word_segment on word_segment.gloss_id = morpheme_gloss.id\n  left join word on word.id = word_segment.word_id\nwhere morpheme_gloss.gloss = $1\n  and document.short_name = $2\norder by word_segment.morpheme\n"
  },
  "34755721c3c12ea731be9251242e9536b0c380137d1ef70a2d0ced7755eefd7f": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "range?",
          "ordinal": 1,
          "type_info": "Int8Range"
        },
        {
          "name": "resource_url",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "include_in_edited_collection",
          "ordinal": 3,
          "type_info": "Bool"
        },
        {
          "name": "recorded_at?",
          "ordinal": 4,
          "type_info": "Date"
        },
        {
          "name": "recorded_by?",
          "ordinal": 5,
          "type_info": "Uuid"
        },
        {
          "name": "recorded_by_name?",
          "ordinal": 6,
          "type_info": "Text"
        },
        {
          "name": "edited_by?",
          "ordinal": 7,
          "type_info": "Uuid"
        },
        {
          "name": "edited_by_name?",
          "ordinal": 8,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        true,
        false,
        false,
        true,
        false,
        false,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "Uuid"
        ]
      }
    },
    "query": "select\n  media_slice.id as \"id\",\n  media_slice.time_range as \"range?\",\n  media_resource.url as \"resource_url\",\n  word_user_media.include_in_edited_collection as \"include_in_edited_collection\",\n  media_resource.recorded_at as \"recorded_at?\",\n  contributor.id as \"recorded_by?\",\n  contributor.display_name as \"recorded_by_name?\",\n  editor.id as \"edited_by?\",\n  editor.display_name as \"edited_by_name?\"\nfrom word_user_media\n  left join media_slice on media_slice.id = word_user_media.media_slice_id\n  left join media_resource on media_resource.id = media_slice.resource_id\n  left join dailp_user contributor on contributor.id = media_resource.recorded_by\n  left join dailp_user editor on editor.id = word_user_media.edited_by\nwhere\n  word_id = $1\norder by media_resource.recorded_at desc\n"
  },
  "35acc71b364ed7efb64b5082a4a23c1424955963bbad243dba6269984a8f69c7": {
    "describe": {
      "columns": [
        {
          "name": "index_in_word",
          "ordinal": 0,
          "type_info": "Int8"
        },
        {
          "name": "word_id",
          "ordinal": 1,
          "type_info": "Uuid"
        },
        {
          "name": "morpheme",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "gloss_id",
          "ordinal": 3,
          "type_info": "Uuid"
        },
        {
          "name": "gloss",
          "ordinal": 4,
          "type_info": "Text"
        },
        {
          "name": "role: WordSegmentRole",
          "ordinal": 5,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "Morpheme",
                  "Clitic",
                  "Modifier"
                ]
              },
              "name": "word_segment_role"
            }
          }
        }
      ],
      "nullable": [
        false,
        false,
        false,
        true,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "UuidArray"
        ]
      }
    },
    "query": "select\n  word_segment.index_in_word,\n  word_segment.word_id,\n  word_segment.morpheme,\n  word_segment.gloss_id,\n  morpheme_gloss.gloss,\n  word_segment.role as \"role: WordSegmentRole\"\nfrom word_segment\n  inner join morpheme_gloss on morpheme_gloss.id = word_segment.gloss_id\nwhere word_segment.word_id = any($1)\norder by word_segment.index_in_word\n"
  },
  "363ece97aadc2e4337605619ae9c6a05618ec651a61aecddaa07ebc66698479c": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Uuid"
        ]
      }
    },
    "query": "insert into dailp_user (id, display_name, created_at)\nvalues (\n    -- hint for uuid type instead of autouuid (column type), which can't be used\n    -- as a parameter\n    $1::uuid,\n    '',\n    now()\n)\non conflict do nothing;\n"
  },
  "388c671a0e5cf32298db07a5286a1ecb0efe59c9ddbdff1c7c49f79454a21801": {
    "describe": {
      "columns": [
        {
          "name": "id!",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "TextArray"
        ]
      }
    },
    "query": "select abstract_morpheme_tag.id as \"id!\"\nfrom unnest($1::text[]) as morpheme_gloss\n  inner join\n    abstract_morpheme_tag on abstract_morpheme_tag.internal_gloss = morpheme_gloss\n"
  },
  "3cf2408c84d9004128643f0e8e96747328340bf155ff46e3c21642a25518e81e": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Uuid"
        ]
      }
    },
    "query": "SELECT d.id\nFROM document as d\nJOIN user_bookmarked_document as ubd on ubd.document_id = d.id\nWHERE ubd.user_id = $1"
  },
  "3e141b9b31a8ff81d384bc12cd860a7b9e17853c1b9a0ce0a5fd4d714d55ff07": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "posted_at",
          "ordinal": 1,
          "type_info": "Timestamp"
        },
        {
          "name": "posted_by",
          "ordinal": 2,
          "type_info": "Uuid"
        },
        {
          "name": "posted_by_name",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "text_content",
          "ordinal": 4,
          "type_info": "Text"
        },
        {
          "name": "comment_type: _",
          "ordinal": 5,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "Story",
                  "Suggestion",
                  "Question"
                ]
              },
              "name": "comment_type_enum"
            }
          }
        },
        {
          "name": "parent_id",
          "ordinal": 6,
          "type_info": "Uuid"
        },
        {
          "name": "parent_type: _",
          "ordinal": 7,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "Word",
                  "Paragraph"
                ]
              },
              "name": "comment_parent_type"
            }
          }
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false,
        false,
        true,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "Uuid"
        ]
      }
    },
    "query": "select\n    comment.id,\n    posted_at,\n    posted_by,\n    u_posted_by.display_name as \"posted_by_name\",\n    text_content,\n    comment_type as \"comment_type: _\",\n    parent_id,\n    parent_type as \"parent_type: _\"\nfrom comment\njoin dailp_user u_posted_by on u_posted_by.id = posted_by\nwhere comment.id = $1"
  },
  "43e42033828a07a488a1fbe4be6a5c7cea9d5c8d471d51a9fd39f939abd060f6": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "index_in_document",
          "ordinal": 1,
          "type_info": "Int8"
        },
        {
          "name": "document_id",
          "ordinal": 2,
          "type_info": "Uuid"
        },
        {
          "name": "iiif_source_id",
          "ordinal": 3,
          "type_info": "Uuid"
        },
        {
          "name": "iiif_oid",
          "ordinal": 4,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        true,
        true
      ],
      "parameters": {
        "Left": [
          "UuidArray"
        ]
      }
    },
    "query": "select\n  id,\n  index_in_document,\n  document_id,\n  iiif_source_id,\n  iiif_oid\nfrom document_page\nwhere document_id = any($1)\norder by index_in_document asc\n"
  },
  "47626f51affde3132dc7723df14672dfd5f606b93f3a7783bfad78bb528879a4": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Uuid",
          "Int8",
          "Uuid",
          "Text"
        ]
      }
    },
    "query": "insert into document_page (document_id, index_in_document, iiif_source_id, iiif_oid)\nvalues ($1, $2, $3, $4)\non conflict (document_id, index_in_document) do update set\nindex_in_document = excluded.index_in_document,\niiif_source_id = excluded.iiif_source_id,\niiif_oid = excluded.iiif_oid\nreturning id\n"
  },
  "47b487e7f70a9c10dbf1bc17d2a975c2e6a7edf9f6c11f6e295b4adc25b9a351": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "title",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "wordpress_menu_id",
          "ordinal": 2,
          "type_info": "Int8"
        },
        {
          "name": "slug",
          "ordinal": 3,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false,
        true,
        false
      ],
      "parameters": {
        "Left": [
          "TextArray"
        ]
      }
    },
    "query": "select id, title, wordpress_menu_id, slug\nfrom edited_collection\nwhere slug = any($1)"
  },
  "485b68540ad5d84e5e98c8ec34d4bbc9ddf5a4d129dca5aa9a87b5217c26e9a0": {
    "describe": {
      "columns": [
        {
          "name": "gloss_id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "example_shape",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "system_name",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "abstract_gloss",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "concrete_gloss",
          "ordinal": 4,
          "type_info": "Text"
        },
        {
          "name": "title",
          "ordinal": 5,
          "type_info": "Text"
        },
        {
          "name": "description",
          "ordinal": 6,
          "type_info": "Text"
        },
        {
          "name": "role_override: WordSegmentRole",
          "ordinal": 7,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "Morpheme",
                  "Clitic",
                  "Modifier"
                ]
              },
              "name": "word_segment_role"
            }
          }
        },
        {
          "name": "linguistic_type",
          "ordinal": 8,
          "type_info": "Text"
        },
        {
          "name": "internal_tags",
          "ordinal": 9,
          "type_info": "TextArray"
        }
      ],
      "nullable": [
        false,
        true,
        false,
        false,
        false,
        false,
        true,
        true,
        true,
        null
      ],
      "parameters": {
        "Left": [
          "TextArray",
          "TextArray"
        ]
      }
    },
    "query": "select\n  morpheme_gloss.id as gloss_id,\n  morpheme_gloss.example_shape,\n  abbreviation_system.short_name as system_name,\n  morpheme_gloss.gloss as abstract_gloss,\n  morpheme_tag.gloss as concrete_gloss,\n  morpheme_tag.title,\n  morpheme_tag.description,\n  morpheme_tag.role_override as \"role_override: WordSegmentRole\",\n  abstract_morpheme_tag.linguistic_type,\n  array(\n    select abstract_morpheme_tag.internal_gloss\n    from unnest(morpheme_tag.abstract_ids) as abstract_id\n      inner join abstract_morpheme_tag on abstract_morpheme_tag.id = abstract_id) as internal_tags\nfrom morpheme_gloss\n  inner join abstract_morpheme_tag on abstract_morpheme_tag.id = morpheme_gloss.tag_id\n  left join abbreviation_system on abbreviation_system.short_name = any($2)\n  inner join morpheme_tag on morpheme_tag.abstract_ids[1] = abstract_morpheme_tag.id\nwhere morpheme_gloss.gloss = any($1)\n  and morpheme_tag.system_id = abbreviation_system.id\norder by array_length(morpheme_tag.abstract_ids, 1) desc\n"
  },
  "49f26a45b73a43fe847fdeba747d4b857705f380fa7a5f314c9d5ae1103d81a9": {
    "describe": {
      "columns": [
        {
          "name": "gloss_id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "example_shape",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "system_name",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "gloss",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "title",
          "ordinal": 4,
          "type_info": "Text"
        },
        {
          "name": "description",
          "ordinal": 5,
          "type_info": "Text"
        },
        {
          "name": "role_override: WordSegmentRole",
          "ordinal": 6,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "Morpheme",
                  "Clitic",
                  "Modifier"
                ]
              },
              "name": "word_segment_role"
            }
          }
        },
        {
          "name": "linguistic_type",
          "ordinal": 7,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        true,
        false,
        false,
        false,
        true,
        true,
        true
      ],
      "parameters": {
        "Left": [
          "UuidArray",
          "TextArray"
        ]
      }
    },
    "query": "select\n  morpheme_gloss.id as gloss_id,\n  morpheme_gloss.example_shape,\n  abbreviation_system.short_name as system_name,\n  morpheme_tag.gloss,\n  morpheme_tag.title,\n  morpheme_tag.description,\n  morpheme_tag.role_override as \"role_override: WordSegmentRole\",\n  abstract_morpheme_tag.linguistic_type\nfrom morpheme_gloss\n  inner join abstract_morpheme_tag on abstract_morpheme_tag.id = morpheme_gloss.tag_id\n  left join abbreviation_system on abbreviation_system.short_name = any($2)\n  inner join morpheme_tag on morpheme_tag.abstract_ids[1] = abstract_morpheme_tag.id\nwhere morpheme_gloss.id = any($1)\n  and morpheme_tag.system_id = abbreviation_system.id\n"
  },
  "5549c7f2ae3991f56bf51c9aa562c2a4672277cd741b6ca303b5a24ccc508065": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "title",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "slug",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "chapter_path",
          "ordinal": 3,
          "type_info": {
            "Custom": {
              "kind": "Simple",
              "name": "ltree"
            }
          }
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false
      ],
      "parameters": {
        "Left": [
          {
            "Custom": {
              "kind": "Simple",
              "name": "ltree"
            }
          }
        ]
      }
    },
    "query": "select id, title, slug, chapter_path\nfrom collection_chapter\nwhere chapter_path @> $1 and chapter_path != $1\n"
  },
  "557d3873ee9d7a09888ebd831dc0256725e9f726c189b4e24d36d8a3201f007a": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "source_text",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "simple_phonetics",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "phonemic",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "english_gloss",
          "ordinal": 4,
          "type_info": "Text"
        },
        {
          "name": "commentary",
          "ordinal": 5,
          "type_info": "Text"
        },
        {
          "name": "document_id",
          "ordinal": 6,
          "type_info": "Uuid"
        },
        {
          "name": "index_in_document",
          "ordinal": 7,
          "type_info": "Int8"
        },
        {
          "name": "page_number",
          "ordinal": 8,
          "type_info": "Text"
        },
        {
          "name": "audio_recorded_at?",
          "ordinal": 9,
          "type_info": "Date"
        },
        {
          "name": "audio_url?",
          "ordinal": 10,
          "type_info": "Text"
        },
        {
          "name": "audio_slice?",
          "ordinal": 11,
          "type_info": "Int8Range"
        },
        {
          "name": "audio_slice_id?",
          "ordinal": 12,
          "type_info": "Uuid"
        },
        {
          "name": "audio_recorded_by?",
          "ordinal": 13,
          "type_info": "Uuid"
        },
        {
          "name": "audio_recorded_by_name?",
          "ordinal": 14,
          "type_info": "Text"
        },
        {
          "name": "include_audio_in_edited_collection",
          "ordinal": 15,
          "type_info": "Bool"
        },
        {
          "name": "audio_edited_by?",
          "ordinal": 16,
          "type_info": "Uuid"
        },
        {
          "name": "audio_edited_by_name?",
          "ordinal": 17,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false,
        true,
        true,
        true,
        true,
        false,
        false,
        true,
        true,
        false,
        true,
        false,
        false,
        false,
        false,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "Uuid",
          "Int8",
          "Int8"
        ]
      }
    },
    "query": "select\n  word.id,\n  word.source_text,\n  word.simple_phonetics,\n  word.phonemic,\n  word.english_gloss,\n  word.commentary,\n  word.document_id,\n  word.index_in_document,\n  word.page_number,\n  media_resource.recorded_at as \"audio_recorded_at?\",\n  media_resource.url as \"audio_url?\",\n  media_slice.time_range as \"audio_slice?\",\n  media_slice.id as \"audio_slice_id?\",\n  contributor.id as \"audio_recorded_by?\",\n  contributor.display_name as \"audio_recorded_by_name?\",\n  word.include_audio_in_edited_collection,\n  editor.id as \"audio_edited_by?\",\n  editor.display_name as \"audio_edited_by_name?\"\nfrom word\n  left join media_slice on media_slice.id = word.audio_slice_id\n  left join media_resource on media_resource.id = media_slice.resource_id\n  left join dailp_user contributor on contributor.id = media_resource.recorded_by\n  left join dailp_user editor on editor.id = media_resource.recorded_by\nwhere\n  document_id = $1 and (\n    word.index_in_document >= $2 or $2 is null\n  ) and (word.index_in_document < $3 or $3 is null)\norder by index_in_document\n"
  },
  "57df2982e788599773dc55b1fc70dfd0739f4dcd6702079f93cd6ff24a992bff": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Uuid",
          "TextArray"
        ]
      }
    },
    "query": "update paragraph set\n    english_translation =\n        case\n            when $2::text[] != '{}' and $2[1] is not null then $2[1]\n            else english_translation\n        end\nwhere id = $1"
  },
  "587e868e1c86816469a9169bf07be80df5add11ef357029f74629e112d88b88e": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "UuidArray",
          "TextArray"
        ]
      }
    },
    "query": "-- Insert a document-local morpheme gloss if and only if there's no matching\n-- global gloss.\ninsert into morpheme_gloss (document_id, gloss)\nselect document_id, gloss from unnest($1::uuid[], $2::text[]) as input_data(document_id, gloss)\nwhere not exists (select from morpheme_gloss where morpheme_gloss.document_id is null and morpheme_gloss.gloss = input_data.gloss)\non conflict (coalesce(document_id, uuid_nil()), gloss) do nothing\n"
  },
  "5a0b15cba34f7675b31afa6c09d970533df17db3dd3df43b67df271101fbd2e7": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "source_text",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "simple_phonetics",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "phonemic",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "english_gloss",
          "ordinal": 4,
          "type_info": "Text"
        },
        {
          "name": "commentary",
          "ordinal": 5,
          "type_info": "Text"
        },
        {
          "name": "document_id",
          "ordinal": 6,
          "type_info": "Uuid"
        },
        {
          "name": "index_in_document",
          "ordinal": 7,
          "type_info": "Int8"
        },
        {
          "name": "page_number",
          "ordinal": 8,
          "type_info": "Text"
        },
        {
          "name": "audio_recorded_at?",
          "ordinal": 9,
          "type_info": "Date"
        },
        {
          "name": "audio_url?",
          "ordinal": 10,
          "type_info": "Text"
        },
        {
          "name": "audio_slice?",
          "ordinal": 11,
          "type_info": "Int8Range"
        },
        {
          "name": "audio_slice_id?",
          "ordinal": 12,
          "type_info": "Uuid"
        },
        {
          "name": "audio_recorded_by?",
          "ordinal": 13,
          "type_info": "Uuid"
        },
        {
          "name": "audio_recorded_by_name?",
          "ordinal": 14,
          "type_info": "Text"
        },
        {
          "name": "include_audio_in_edited_collection",
          "ordinal": 15,
          "type_info": "Bool"
        },
        {
          "name": "audio_edited_by?",
          "ordinal": 16,
          "type_info": "Uuid"
        },
        {
          "name": "audio_edited_by_name?",
          "ordinal": 17,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false,
        true,
        true,
        true,
        true,
        false,
        false,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        false,
        true,
        true
      ],
      "parameters": {
        "Left": [
          "TextArray"
        ]
      }
    },
    "query": "select\n  word.id,\n  word.source_text,\n  word.simple_phonetics,\n  word.phonemic,\n  word.english_gloss,\n  word.commentary,\n  word.document_id,\n  word.index_in_document,\n  word.page_number,\n  media_resource.recorded_at as \"audio_recorded_at?\",\n  media_resource.url as \"audio_url?\",\n  media_slice.time_range as \"audio_slice?\",\n  media_slice.id as \"audio_slice_id?\",\n  contributor.id as \"audio_recorded_by?\",\n  contributor.display_name as \"audio_recorded_by_name?\",\n  word.include_audio_in_edited_collection as \"include_audio_in_edited_collection\",\n  editor.id as \"audio_edited_by?\",\n  editor.display_name as \"audio_edited_by_name?\"\nfrom word\n  left join media_slice on media_slice.id = word.audio_slice_id\n  left join media_resource on media_resource.id = media_slice.resource_id\n  left join dailp_user contributor on contributor.id = media_resource.recorded_by\n  left join dailp_user editor on editor.id = word.audio_edited_by\nwhere source_text like any($1)\n"
  },
  "5b699e0fcc9467aed4c1b5ae6361341ed338c32e286e1ae47a3ded10bba0bbf2": {
    "describe": {
      "columns": [
        {
          "name": "slug",
          "ordinal": 0,
          "type_info": "Text"
        },
        {
          "name": "title",
          "ordinal": 1,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "select\n  slug,\n  title\nfrom document_group\nwhere slug = $1\n"
  },
  "5ded205a75d86aa6e5710741ce36d735b43fc0d756aac969929c4cf2d53927a4": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "short_name",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "title",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "group_id",
          "ordinal": 3,
          "type_info": "Uuid"
        },
        {
          "name": "index_in_group",
          "ordinal": 4,
          "type_info": "Int8"
        },
        {
          "name": "is_reference",
          "ordinal": 5,
          "type_info": "Bool"
        },
        {
          "name": "written_at",
          "ordinal": 6,
          "type_info": "Date"
        },
        {
          "name": "audio_slice_id",
          "ordinal": 7,
          "type_info": "Uuid"
        },
        {
          "name": "audio_url?",
          "ordinal": 8,
          "type_info": "Text"
        },
        {
          "name": "recorded_at?",
          "ordinal": 9,
          "type_info": "Date"
        },
        {
          "name": "recorded_by?",
          "ordinal": 10,
          "type_info": "Uuid"
        },
        {
          "name": "recorded_by_name?",
          "ordinal": 11,
          "type_info": "Text"
        },
        {
          "name": "audio_slice?",
          "ordinal": 12,
          "type_info": "Int8Range"
        },
        {
          "name": "bookmarked_on?",
          "ordinal": 13,
          "type_info": "Date"
        },
        {
          "name": "contributors",
          "ordinal": 14,
          "type_info": "Jsonb"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false,
        false,
        false,
        true,
        true,
        false,
        true,
        false,
        false,
        true,
        false,
        null
      ],
      "parameters": {
        "Left": [
          "TextArray"
        ]
      }
    },
    "query": "select\n  d.*,\n  media_resource.url as \"audio_url?\",\n  media_resource.recorded_at as \"recorded_at?\",\n  dailp_user.id as \"recorded_by?\",\n  dailp_user.display_name as \"recorded_by_name?\",\n  media_slice.time_range as \"audio_slice?\",\n  ubd.bookmarked_on as \"bookmarked_on?\",\n  coalesce(\n    jsonb_agg(\n      jsonb_build_object(\n        'name', contributor.full_name, 'role', attr.contribution_role\n      )\n    ) filter (where contributor is not null),\n    '[]'\n  )\n  as contributors\nfrom document as d\n  left join contributor_attribution as attr on attr.document_id = d.id\n  left join contributor on contributor.id = attr.contributor_id\n  left join media_slice on media_slice.id = d.audio_slice_id\n  left join media_resource on media_resource.id = media_slice.resource_id\n  left join dailp_user on dailp_user.id = media_resource.recorded_by\n  left join user_bookmarked_document as ubd on ubd.document_id = d.id\nwhere d.short_name = any($1)\ngroup by d.id,\n  media_slice.id,\n  media_resource.id,\n  dailp_user.id,\n  ubd.bookmarked_on\n"
  },
  "5e289d51c54b8f14432482d05e86ec9b6ffddd5b83acee04fcd76bdab6dd27a5": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Text",
          "Text"
        ]
      }
    },
    "query": "insert into abstract_morpheme_tag (internal_gloss, linguistic_type)\nvalues ($1, $2)\non conflict (internal_gloss) do update set\nlinguistic_type = excluded.linguistic_type\nreturning id\n"
  },
  "5ed736651d677fd216c010f1dec8b0617a3d682d6a438b977185d94423e05300": {
    "describe": {
      "columns": [
        {
          "name": "document_id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "contribution_role",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "id",
          "ordinal": 2,
          "type_info": "Uuid"
        },
        {
          "name": "full_name",
          "ordinal": 3,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "UuidArray"
        ]
      }
    },
    "query": "select\n  attr.document_id,\n  attr.contribution_role,\n  contributor.id,\n  contributor.full_name\nfrom contributor_attribution as attr\n  inner join contributor on contributor.id = attr.contributor_id\nwhere attr.document_id = any($1)\n"
  },
  "6858e67c5a27aa4f38366244a46c9a4a50546c164a2b91599301aad1bc8f3cd0": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "TextArray",
          "UuidArray",
          "TextArray"
        ]
      }
    },
    "query": "insert into contributor_attribution (contributor_id, document_id, contribution_role)\nselect\n  contributor.id,\n  input_data.doc_id,\n  input_data.contribution_role\nfrom\n  unnest(\n    $1::text[], $2::uuid[], $3::text[]\n  ) as input_data(full_name, doc_id, contribution_role)\n  inner join contributor on contributor.full_name = input_data.full_name\n-- If this document already has this contributor, move on.\non conflict do nothing\n"
  },
  "6d5a72c97ad0bb2831e0b605a340630b28f70402023f5abec5ff2043f343f0b1": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "delete from media_resource\nwhere id in (\n  select media_slice.resource_id\n  from media_slice\n    inner join document on document.audio_slice_id = media_slice.id\n  where document.short_name = $1\n)\n"
  },
  "71674fa0e3cc15ae4ab9509aed80adcf20010b5d7bcf7e68a88d95e685abb323": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "UuidArray",
          "TextArray",
          "TextArray",
          "TextArray",
          "TextArray",
          "DateArray",
          "TextArray",
          "TextArray",
          "Int8Array"
        ]
      }
    },
    "query": "insert into word (document_id, source_text, simple_phonetics, phonemic, english_gloss, recorded_at, commentary,\n  page_number, index_in_document)\nselect * from unnest($1::uuid[], $2::text[], $3::text[], $4::text[], $5::text[], $6::date[], $7::text[], $8::text[], $9::bigint[])\nreturning id\n"
  },
  "73409561936ce0fa2234c9b37c12419fd61bed4d25a4a87599bbf646b80c7d9f": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "UuidArray",
          "TextArray",
          "UuidArray",
          "Int8Array",
          "TextArray",
          {
            "Custom": {
              "kind": {
                "Array": {
                  "Custom": {
                    "kind": {
                      "Enum": [
                        "Morpheme",
                        "Clitic",
                        "Modifier"
                      ]
                    },
                    "name": "word_segment_role"
                  }
                }
              },
              "name": "_word_segment_role"
            }
          }
        ]
      }
    },
    "query": "insert into word_segment (gloss_id, word_id, index_in_word, morpheme, role)\n-- Fill in glosses that weren't inserted with their global match.\nselect\n  coalesce(inserted_gloss.id, global_gloss.id),\n  word_id,\n  index,\n  morpheme,\n  role\nfrom\n  unnest(\n    $1::uuid[], $2::text[], $3::uuid[], $4::bigint[], $5::text[], $6::word_segment_role[]\n  ) as input_data(document_id, gloss, word_id, index, morpheme, role)\n  left join\n    morpheme_gloss as inserted_gloss on\n      inserted_gloss.document_id = input_data.document_id and inserted_gloss.gloss = input_data.gloss\n  left join\n    morpheme_gloss as global_gloss on\n      global_gloss.document_id is null and global_gloss.gloss = input_data.gloss\non conflict (word_id, index_in_word)\ndo update set\nmorpheme = excluded.morpheme,\ngloss_id = excluded.gloss_id,\nrole = excluded.role\n"
  },
  "736bb1b4c8d050434299383e2f3278824c9bf68ba926e888642e65fdb19b3d2c": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Uuid",
          "TextArray",
          "TextArray"
        ]
      }
    },
    "query": "insert into morpheme_gloss (document_id, gloss, example_shape)\nselect $1, * from unnest($2::text[], $3::text[])\non conflict (coalesce(document_id, uuid_nil()), gloss)\n  do update set\n    example_shape = excluded.example_shape\n"
  },
  "749fb63d5984a981541e4e48f58a537362159925056c7c2ef2da6ef55ce95c53": {
    "describe": {
      "columns": [
        {
          "name": "word_id",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [
        null
      ],
      "parameters": {
        "Left": [
          "Uuid",
          "Uuid",
          "Bool",
          "Uuid"
        ]
      }
    },
    "query": "-- Binds: word_id, slice_id, include_in_edited_collection, editor_id\n\nwith word_update as (\n  -- update ingested audio, if the slice_id was ingested audio\n  update word\n  set include_audio_in_edited_collection=$3,\n      audio_edited_by=$4\n  where word.id = $1\n    -- if the slice_id given doesn't match, we won't update\n    and word.audio_slice_id = $2 \n  returning word.id as word_id\n),\nword_user_media_update as (\n-- update user contributed audio, if the slice id is user contributed audio tied to the word\n  update word_user_media\n  set include_in_edited_collection=$3,\n      edited_by=$4\n  where word_id = $1\n    and media_slice_id = $2\n    returning word_id\n)\n\nselect distinct t.word_id\nfrom (\n  select word_id from word_update\n  union\n  select word_id from word_user_media_update\n) as t"
  },
  "774aa2feee9734f0cb7270b3e330731422aecbd72551cdd4a7f24b5fb1dc7c66": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "insert into contributor (full_name)\nvalues ($1)\non conflict (full_name) do update set\nfull_name = excluded.full_name\n"
  },
  "7860f1d60b1f09d62987a89d413a7243cb23005b6f19bb539b88311dbfbd223d": {
    "describe": {
      "columns": [
        {
          "name": "slug",
          "ordinal": 0,
          "type_info": "Text"
        },
        {
          "name": "title",
          "ordinal": 1,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false
      ],
      "parameters": {
        "Left": [
          "Uuid"
        ]
      }
    },
    "query": "select\n  document_group.slug,\n  document_group.title\nfrom document\n  inner join document_group on document_group.id = document.group_id\nwhere document.id = $1\n"
  },
  "7a6c5fc86cb220cb8e0dcbfbbb994b6288490c39e31cef7bc46a9ccc7e321438": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Uuid",
          "Int8Array",
          "TextArray"
        ]
      }
    },
    "query": "insert into character_transcription (\n  page_id, index_in_page, possible_transcriptions\n)\nselect\n  $1,\n  index,\n  array[transcription]\nfrom unnest($2::bigint[], $3::text[]) as t(index, transcription)\n"
  },
  "7dd3742e8e678aa19890a52f0843ed635cf126dd6f9b50b57918184dab2485c1": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Text",
          "Text",
          "Text",
          "Text",
          "Date",
          "Text",
          "Uuid",
          "Text",
          "Int8",
          "Uuid",
          "Int8Range",
          "Text",
          "Int8",
          "Int8"
        ]
      }
    },
    "query": "-- Insert audio resource if there is one for this word.\nwith inserted_audio_resource as (\n  insert into media_resource (url)\n  select $12::text\n  where $12 is not null\n  on conflict (url) do nothing\n),\n\ninserted_audio_slice as (\n  insert into media_slice (resource_id, time_range)\n  select media_resource.id, int8range($13, $14)\n  from media_resource\n  where media_resource.url = $12\n  returning id\n)\n\ninsert into word (\n  source_text, simple_phonetics, phonemic, english_gloss, recorded_at, commentary,\n  document_id, page_number, index_in_document, page_id, character_range, audio_slice_id)\nselect $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, inserted_audio_slice.id\nfrom (values (1)) as t\n  left join inserted_audio_slice on true\nreturning id\n"
  },
  "801894d827b0385398a9e5fd631d66002634a8958eda5565544433318d0af6a4": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Text",
          "Text"
        ]
      }
    },
    "query": "insert into abbreviation_system (short_name, title)\nvalues ($1, $2)\non conflict (short_name) do update set\ntitle = excluded.title\nreturning id\n"
  },
  "829f9c2b35731454ad938f666f546edd281de1873a2899710b5a6b9d694a2012": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Text",
          "Text",
          "Int8",
          "Int8",
          {
            "Custom": {
              "kind": "Simple",
              "name": "ltree"
            }
          },
          {
            "Custom": {
              "kind": {
                "Enum": [
                  "Intro",
                  "Body",
                  "Credit"
                ]
              },
              "name": "collection_section"
            }
          }
        ]
      }
    },
    "query": "insert into collection_chapter (\n  title,\n  document_id,\n  wordpress_id,\n  index_in_parent,\n  chapter_path,\n  section)\nvalues (\n  $1,\n  ( select id\n    from document\n    where short_name = $2),\n  $3,\n  $4,\n  $5,\n  $6\n)\n"
  },
  "83485d5e45864f8200987fb4a6401eafbb81237d50de27b1420ad66663e7d7ee": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Uuid",
          "Uuid"
        ]
      }
    },
    "query": "DELETE FROM user_bookmarked_document\nWHERE document_id = $1 AND user_id = $2;"
  },
  "8469d3fbe5939fa87e81b7afb2bbb614596235e99472eb0db600b000a3775207": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Uuid",
          "UuidArray",
          "Text",
          "Text",
          {
            "Custom": {
              "kind": {
                "Enum": [
                  "Morpheme",
                  "Clitic",
                  "Modifier"
                ]
              },
              "name": "word_segment_role"
            }
          },
          "Text"
        ]
      }
    },
    "query": "insert into morpheme_tag (\n  system_id, abstract_ids, gloss, title, role_override, description\n)\nvalues ($1, $2, $3, $4, $5, $6)\non conflict (system_id, abstract_ids) do update set\ngloss = excluded.gloss,\ntitle = excluded.title,\nrole_override = excluded.role_override,\ndescription = excluded.description\n"
  },
  "848587140aaec9c68285617dab22966b1662abc6b5e8ead54cbcbed971352d0c": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "posted_at",
          "ordinal": 1,
          "type_info": "Timestamp"
        },
        {
          "name": "posted_by",
          "ordinal": 2,
          "type_info": "Uuid"
        },
        {
          "name": "posted_by_name",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "text_content",
          "ordinal": 4,
          "type_info": "Text"
        },
        {
          "name": "comment_type: _",
          "ordinal": 5,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "Story",
                  "Suggestion",
                  "Question"
                ]
              },
              "name": "comment_type_enum"
            }
          }
        },
        {
          "name": "parent_id",
          "ordinal": 6,
          "type_info": "Uuid"
        },
        {
          "name": "parent_type: _",
          "ordinal": 7,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "Word",
                  "Paragraph"
                ]
              },
              "name": "comment_parent_type"
            }
          }
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false,
        false,
        true,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "Uuid",
          {
            "Custom": {
              "kind": {
                "Enum": [
                  "Word",
                  "Paragraph"
                ]
              },
              "name": "comment_parent_type"
            }
          }
        ]
      }
    },
    "query": "select\n    comment.id,\n    posted_at,\n    posted_by,\n    u_posted_by.display_name as \"posted_by_name\",\n    text_content,\n    comment_type as \"comment_type: _\",\n    parent_id,\n    parent_type as \"parent_type: _\"\nfrom comment\njoin dailp_user u_posted_by on u_posted_by.id = posted_by\nwhere parent_id = $1 and parent_type = $2\norder by posted_at asc"
  },
  "8d3ceaae6a15910949eceeeff805e3a93231b1d234897dc2f8bd71fc6df3baaa": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Text",
          "Text"
        ]
      }
    },
    "query": "-- Insert a collection with a certain slug.\ninsert into document_group (slug, title)\nvalues ($1, $2)\non conflict (slug) do update set\ntitle = excluded.title\nreturning id\n"
  },
  "8f23f2ea8730fc8f24aee4a5a62d102d386a68749f299d84b341513a5b9048c5": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Text",
          "Text",
          "Bool",
          "Date",
          "Uuid",
          "Uuid",
          "Int8"
        ]
      }
    },
    "query": "insert into document (\n  short_name, title, is_reference, written_at, audio_slice_id, group_id, index_in_group\n)\nvalues ($1, $2, $3, $4, $5, $6, $7)\non conflict (short_name) do update set\ntitle = excluded.title,\nis_reference = excluded.is_reference,\nwritten_at = excluded.written_at,\naudio_slice_id = excluded.audio_slice_id,\ngroup_id = excluded.group_id,\nindex_in_group = excluded.index_in_group\nreturning id\n"
  },
  "9087654cfb3bb8103bafbc7400f82960536577530e58aa6eb6bc29aca1fd2f5c": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Uuid",
          "Uuid"
        ]
      }
    },
    "query": "INSERT INTO user_bookmarked_document (document_id, user_id, bookmarked_on)\nVALUES ($1, $2, NOW());"
  },
  "93a6c0a72e2d56064fffad8eda07a6b8aa73080106ce3283a087b010bc3658dd": {
    "describe": {
      "columns": [
        {
          "name": "title",
          "ordinal": 0,
          "type_info": "Text"
        },
        {
          "name": "slug",
          "ordinal": 1,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false
      ],
      "parameters": {
        "Left": []
      }
    },
    "query": "select\n  document_group.title,\n  document_group.slug\nfrom document_group\n  left join document on document.group_id = document_group.id\nwhere document.is_reference is false\ngroup by document_group.id\norder by document_group.title asc\n"
  },
  "9404181792966be2d77b3a751ebba731341f0a2fb8bd5f231e6add7a438c525d": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "source_text",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "simple_phonetics",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "phonemic",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "english_gloss",
          "ordinal": 4,
          "type_info": "Text"
        },
        {
          "name": "commentary",
          "ordinal": 5,
          "type_info": "Text"
        },
        {
          "name": "document_id",
          "ordinal": 6,
          "type_info": "Uuid"
        },
        {
          "name": "index_in_document",
          "ordinal": 7,
          "type_info": "Int8"
        },
        {
          "name": "page_number",
          "ordinal": 8,
          "type_info": "Text"
        },
        {
          "name": "audio_recorded_at?",
          "ordinal": 9,
          "type_info": "Date"
        },
        {
          "name": "audio_url?",
          "ordinal": 10,
          "type_info": "Text"
        },
        {
          "name": "audio_slice?",
          "ordinal": 11,
          "type_info": "Int8Range"
        },
        {
          "name": "audio_slice_id?",
          "ordinal": 12,
          "type_info": "Uuid"
        },
        {
          "name": "audio_recorded_by?",
          "ordinal": 13,
          "type_info": "Uuid"
        },
        {
          "name": "audio_recorded_by_name?",
          "ordinal": 14,
          "type_info": "Text"
        },
        {
          "name": "include_audio_in_edited_collection",
          "ordinal": 15,
          "type_info": "Bool"
        },
        {
          "name": "audio_edited_by?",
          "ordinal": 16,
          "type_info": "Uuid"
        },
        {
          "name": "audio_edited_by_name?",
          "ordinal": 17,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false,
        true,
        true,
        true,
        true,
        false,
        false,
        true,
        true,
        false,
        true,
        false,
        false,
        false,
        false,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "Uuid"
        ]
      }
    },
    "query": "select\n  word.id,\n  word.source_text,\n  word.simple_phonetics,\n  word.phonemic,\n  word.english_gloss,\n  word.commentary,\n  word.document_id,\n  word.index_in_document,\n  word.page_number,\n  media_resource.recorded_at as \"audio_recorded_at?\",\n  media_resource.url as \"audio_url?\",\n  media_slice.time_range as \"audio_slice?\",\n  media_slice.id as \"audio_slice_id?\",\n  contributor.id as \"audio_recorded_by?\",\n  contributor.display_name as \"audio_recorded_by_name?\",\n  word.include_audio_in_edited_collection,\n  editor.id as \"audio_edited_by?\",\n  editor.display_name as \"audio_edited_by_name?\"\nfrom word\n  left join media_slice on media_slice.id = word.audio_slice_id\n  left join media_resource on media_resource.id = media_slice.resource_id\n  left join dailp_user contributor on contributor.id = media_resource.recorded_by\n  left join dailp_user editor on editor.id = media_resource.recorded_by\nwhere\n  word.id = $1\n"
  },
  "958ee8a09f73dbfa64ba57e184e28342627ea3593ded2a08b451bfa52a2382b6": {
    "describe": {
      "columns": [
        {
          "name": "document_id",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Uuid",
          "TextArray",
          "TextArray"
        ]
      }
    },
    "query": "update word set\n    source_text =\n        case\n            when $2::text[] != '{}' and $2[1] is not null then $2[1]\n            else source_text\n        end,\n    commentary =\n        case\n            when $3::text[] != '{}' then $3[1]\n            else commentary\n        end\nwhere id = $1\nreturning word.document_id;"
  },
  "9e02521e2e4f9bb5ee2e1c9dd33e18bb9b0ee8b7d584cf9867b889b92334f082": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "short_name",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "title",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "date: Date",
          "ordinal": 3,
          "type_info": "Date"
        },
        {
          "name": "order_index",
          "ordinal": 4,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        true,
        false
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "select\n  d.id,\n  d.short_name,\n  d.title,\n  d.written_at as \"date: Date\",\n  d.index_in_group as order_index\nfrom document_group\n  inner join document as d on document_group.id = d.group_id\nwhere document_group.slug = $1\norder by d.index_in_group asc\n"
  },
  "9f91be464c9e113d326e6ba91b03dc95f1b94adf482990dba756305fb68b0165": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Text",
          "Text",
          "Bool",
          "Date",
          "Uuid",
          "Uuid"
        ]
      }
    },
    "query": "insert into document (\n  short_name, title, is_reference, written_at, audio_slice_id, group_id\n)\nvalues ($1, $2, $3, $4, $5, $6)\non conflict (short_name) do update set\ntitle = excluded.title,\nis_reference = excluded.is_reference,\nwritten_at = excluded.written_at,\naudio_slice_id = excluded.audio_slice_id,\ngroup_id = excluded.group_id\nreturning id\n"
  },
  "a0cec5199d10a1135a4074b4620c0b45b552c38f26ecee945ef94f2afccdbe83": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Uuid",
          "Int8Range",
          "Text"
        ]
      }
    },
    "query": "insert into paragraph (page_id, character_range, english_translation)\nvalues ($1, $2, $3)\n"
  },
  "a24146cbf9ffcb7b7c90f722b3c295a2f55ffbe0edb36f06cc2d18df4707b549": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "base_url",
          "ordinal": 1,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false
      ],
      "parameters": {
        "Left": [
          "Uuid"
        ]
      }
    },
    "query": "select\n  id,\n  base_url\nfrom iiif_source\nwhere id = $1\n"
  },
  "a3de9c6ddb10a50518b2fa828ea6819795526edd0b89244def851fcc204debc6": {
    "describe": {
      "columns": [
        {
          "name": "media_slice_id",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Uuid",
          "Text",
          "Int8",
          "Int8",
          "Uuid"
        ]
      }
    },
    "query": "-- Binds: user_id, resource_url, start, end, word_id\n\nwith upserted_audio_resource as (\n  insert into media_resource (url, recorded_at, recorded_by)\n  select $2::text, now(), $1\n  -- we do this no-op update to ensure an id is returned\n  on conflict (url) do update set url=excluded.url\n  returning id\n),\n\ninserted_audio_slice as (\n  insert into media_slice (resource_id, time_range)\n  select upserted_audio_resource.id, int8range($3, $4)\n  from upserted_audio_resource\n  returning id\n)\n\ninsert into word_user_media (word_id, media_slice_id)\n  select $5, inserted_audio_slice.id\n  from inserted_audio_slice\n  join word on word.id = $5\n    on conflict (media_slice_id, word_id) do nothing -- word already associated\n  returning media_slice_id"
  },
  "a5799421963397f074375ebf431af110f81ae2ec4038f272c82112c3eda5a742": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "source_text",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "simple_phonetics",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "phonemic",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "english_gloss",
          "ordinal": 4,
          "type_info": "Text"
        },
        {
          "name": "commentary",
          "ordinal": 5,
          "type_info": "Text"
        },
        {
          "name": "document_id",
          "ordinal": 6,
          "type_info": "Uuid"
        },
        {
          "name": "index_in_document",
          "ordinal": 7,
          "type_info": "Int8"
        },
        {
          "name": "page_number",
          "ordinal": 8,
          "type_info": "Text"
        },
        {
          "name": "audio_recorded_at?",
          "ordinal": 9,
          "type_info": "Date"
        },
        {
          "name": "audio_url?",
          "ordinal": 10,
          "type_info": "Text"
        },
        {
          "name": "audio_slice?",
          "ordinal": 11,
          "type_info": "Int8Range"
        },
        {
          "name": "audio_slice_id?",
          "ordinal": 12,
          "type_info": "Uuid"
        },
        {
          "name": "audio_recorded_by?",
          "ordinal": 13,
          "type_info": "Uuid"
        },
        {
          "name": "audio_recorded_by_name?",
          "ordinal": 14,
          "type_info": "Text"
        },
        {
          "name": "include_audio_in_edited_collection",
          "ordinal": 15,
          "type_info": "Bool"
        },
        {
          "name": "audio_edited_by?",
          "ordinal": 16,
          "type_info": "Uuid"
        },
        {
          "name": "audio_edited_by_name?",
          "ordinal": 17,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false,
        true,
        true,
        true,
        true,
        false,
        false,
        true,
        true,
        false,
        true,
        false,
        false,
        false,
        false,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "Text",
          "Uuid"
        ]
      }
    },
    "query": "with recursive relations as (\n  -- Base case: all relations involving the input morpheme.\n  select\n    rl.left_gloss_id,\n    rl.right_gloss_id\n  from morpheme_gloss_relation as rl\n    inner join\n      morpheme_gloss on\n        rl.left_gloss_id = morpheme_gloss.id or rl.right_gloss_id = morpheme_gloss.id\n  where morpheme_gloss.gloss = $1 and morpheme_gloss.document_id = $2\n\n  -- Recursive case: saturate the graph (no duplicates)\n  union\n  select\n    rlr.left_gloss_id,\n    rlr.right_gloss_id\n  from morpheme_gloss_relation as rlr\n    -- Retrieve all relations that involve any previous sources or destinations\n    inner join\n      relations on\n        rlr.left_gloss_id = relations.right_gloss_id or rlr.right_gloss_id = relations.left_gloss_id or rlr.left_gloss_id = relations.left_gloss_id or rlr.right_gloss_id = relations.right_gloss_id\n)\n\nselect\n  word.id,\n  word.source_text,\n  word.simple_phonetics,\n  word.phonemic,\n  word.english_gloss,\n  word.commentary,\n  word.document_id,\n  word.index_in_document,\n  word.page_number,\n  media_resource.recorded_at as \"audio_recorded_at?\",\n  media_resource.url as \"audio_url?\",\n  media_slice.time_range as \"audio_slice?\",\n  media_slice.id as \"audio_slice_id?\",\n  contributor.id as \"audio_recorded_by?\",\n  contributor.display_name as \"audio_recorded_by_name?\",\n  word.include_audio_in_edited_collection,\n  editor.id as \"audio_edited_by?\",\n  editor.display_name as \"audio_edited_by_name?\"\nfrom relations\n  inner join\n    morpheme_gloss on\n      morpheme_gloss.id = relations.left_gloss_id or morpheme_gloss.id = relations.right_gloss_id\n  inner join word_segment on word_segment.gloss_id = morpheme_gloss.id\n  inner join word on word.id = word_segment.word_id\n  left join media_slice on media_slice.id = word.audio_slice_id\n  left join media_resource on media_resource.id = media_slice.resource_id\n  left join dailp_user contributor on contributor.id = media_resource.recorded_by\n  left join dailp_user editor on editor.id = word.audio_edited_by\norder by word.document_id\n"
  },
  "afca9b69fc11aef29379ab4d753d0b644b6ee3a698f3a6e857bfb6a83a4b38f1": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Text",
          "Text"
        ]
      }
    },
    "query": "insert into iiif_source (title, base_url)\nvalues ($1, $2)\non conflict (base_url) do update\nset title = excluded.title\nreturning id\n"
  },
  "b2cd756955024a13a5c1e385ef85461a7335fd7fe7bd4c3067f3a872516a77ce": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "title",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "document_id",
          "ordinal": 2,
          "type_info": "Uuid"
        },
        {
          "name": "wordpress_id",
          "ordinal": 3,
          "type_info": "Int8"
        },
        {
          "name": "index_in_parent",
          "ordinal": 4,
          "type_info": "Int8"
        },
        {
          "name": "section: CollectionSection",
          "ordinal": 5,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "Intro",
                  "Body",
                  "Credit"
                ]
              },
              "name": "collection_section"
            }
          }
        },
        {
          "name": "chapter_path",
          "ordinal": 6,
          "type_info": {
            "Custom": {
              "kind": "Simple",
              "name": "ltree"
            }
          }
        },
        {
          "name": "collection_slug!",
          "ordinal": 7,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false,
        true,
        true,
        false,
        false,
        false,
        null
      ],
      "parameters": {
        "Left": [
          "TextArray"
        ]
      }
    },
    "query": "select\n    id,\n    title,\n    document_id,\n    wordpress_id,\n    index_in_parent,\n    section as \"section: CollectionSection\",\n    chapter_path,\n    ltree2text(subpath(chapter_path, 0, 1)) AS \"collection_slug!\"\nfrom collection_chapter\nwhere ltree2text(subpath(chapter_path, 0, 1)) = any($1);"
  },
  "b48c8aaace5a866c6b39949a5b06954e8b9916c363ac4aad0d72bf006accf84b": {
    "describe": {
      "columns": [
        {
          "name": "gloss",
          "ordinal": 0,
          "type_info": "Text"
        }
      ],
      "nullable": [
        null
      ],
      "parameters": {
        "Left": [
          "TextArray",
          "Text"
        ]
      }
    },
    "query": "-- Selects the internal_gloss if there is one, otherwise \n-- selects the given gloss, a custom gloss entered by the user.\nselect coalesce(internal_gloss, input_gloss) as gloss\nfrom abstract_morpheme_tag\n\n-- Limits the fields of the table to only those with one abstract id,\n-- and which have the same abstract id as the abstract_morpheme_tag table.\n  inner join morpheme_tag\n    on array_length(morpheme_tag.abstract_ids, 1) = 1 \n      and abstract_morpheme_tag.id = morpheme_tag.abstract_ids[1] \n\n-- Limits the fields of the table to only those with the matching short name\n-- as the input and those with the corresponding system id from morpheme_tag.\n  inner join abbreviation_system \n    on abbreviation_system.short_name = $2::text \n      and morpheme_tag.system_id = abbreviation_system.id\n\n-- Joins matching glosses with the morpheme_tag table,\n-- and keeps the input_gloss even if there is no matching gloss (these will\n-- be the custom gloss entered by the user.)\n  right join unnest($1::text[]) as input_gloss\n    on input_gloss = morpheme_tag.gloss"
  },
  "bba471ad9b42019470e67093fe974374468b993c472479dfae34b60d505188c0": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Text",
          "Text",
          "Int8"
        ]
      }
    },
    "query": "insert into edited_collection (slug, title, wordpress_menu_id)\nvalues ($1, $2, $3)\non conflict (slug) do update\nset title = excluded.title,\nwordpress_menu_id = excluded.wordpress_menu_id\n"
  },
  "bd5586e95b4aa6def98b1816dd2ff960a78ee82dab544538e572ebb187b48dc0": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "short_name",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "title",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "group_id",
          "ordinal": 3,
          "type_info": "Uuid"
        },
        {
          "name": "index_in_group",
          "ordinal": 4,
          "type_info": "Int8"
        },
        {
          "name": "is_reference",
          "ordinal": 5,
          "type_info": "Bool"
        },
        {
          "name": "written_at",
          "ordinal": 6,
          "type_info": "Date"
        },
        {
          "name": "audio_slice_id",
          "ordinal": 7,
          "type_info": "Uuid"
        },
        {
          "name": "audio_url?",
          "ordinal": 8,
          "type_info": "Text"
        },
        {
          "name": "recorded_at?",
          "ordinal": 9,
          "type_info": "Date"
        },
        {
          "name": "recorded_by?",
          "ordinal": 10,
          "type_info": "Uuid"
        },
        {
          "name": "recorded_by_name?",
          "ordinal": 11,
          "type_info": "Text"
        },
        {
          "name": "audio_slice?",
          "ordinal": 12,
          "type_info": "Int8Range"
        },
        {
          "name": "bookmarked_on?",
          "ordinal": 13,
          "type_info": "Date"
        },
        {
          "name": "contributors",
          "ordinal": 14,
          "type_info": "Jsonb"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false,
        false,
        false,
        true,
        true,
        false,
        true,
        false,
        false,
        true,
        false,
        null
      ],
      "parameters": {
        "Left": [
          "UuidArray"
        ]
      }
    },
    "query": "select\n  d.*,\n  media_resource.url as \"audio_url?\",\n  media_resource.recorded_at as \"recorded_at?\",\n  dailp_user.id as \"recorded_by?\",\n  dailp_user.display_name as \"recorded_by_name?\",\n  media_slice.time_range as \"audio_slice?\",\n  ubd.bookmarked_on as \"bookmarked_on?\",\n  coalesce(\n    jsonb_agg(\n      jsonb_build_object(\n        'name', contributor.full_name, 'role', attr.contribution_role\n      )\n    ) filter (where contributor is not null),\n    '[]'\n  )\n  as contributors\nfrom document as d\n  left join contributor_attribution as attr on attr.document_id = d.id\n  left join contributor on contributor.id = attr.contributor_id\n  left join media_slice on media_slice.id = d.audio_slice_id\n  left join media_resource on media_resource.id = media_slice.resource_id\n  left join dailp_user on dailp_user.id = media_resource.recorded_by\n  left join user_bookmarked_document as ubd on ubd.document_id = d.id\nwhere d.id = any($1)\ngroup by d.id,\n  media_slice.id,\n  media_resource.id,\n  dailp_user.id,\n  ubd.bookmarked_on\n"
  },
  "bde80529393c1595fe31c0bdbaa7e840c68ea7c74896d512c60f6f3b2431fba5": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Uuid"
        ]
      }
    },
    "query": "delete from word\nwhere document_id = $1\n"
  },
  "c09634d274c938e314ed1c2e9bb282851576c7df5a919681cf45b67d3cbe8f4e": {
    "describe": {
      "columns": [
        {
          "name": "system_name",
          "ordinal": 0,
          "type_info": "Text"
        },
        {
          "name": "abstract_ids",
          "ordinal": 1,
          "type_info": "UuidArray"
        },
        {
          "name": "gloss",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "title",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "description",
          "ordinal": 4,
          "type_info": "Text"
        },
        {
          "name": "role_override: WordSegmentRole",
          "ordinal": 5,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "Morpheme",
                  "Clitic",
                  "Modifier"
                ]
              },
              "name": "word_segment_role"
            }
          }
        },
        {
          "name": "linguistic_type",
          "ordinal": 6,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false,
        true,
        true,
        true
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "with t as (\n  select distinct on (morpheme_tag.gloss)\n    abbreviation_system.short_name as system_name,\n    morpheme_tag.abstract_ids,\n    morpheme_tag.gloss,\n    morpheme_tag.title,\n    morpheme_tag.description,\n    morpheme_tag.role_override as \"role_override: WordSegmentRole\",\n    abstract_morpheme_tag.linguistic_type\n  from abbreviation_system\n    inner join\n      morpheme_tag on abbreviation_system.id = morpheme_tag.system_id\n    inner join\n      abstract_morpheme_tag on\n        abstract_morpheme_tag.id = any(morpheme_tag.abstract_ids)\n  where abbreviation_system.short_name = $1\n)\n\nselect *\nfrom t\norder by linguistic_type asc, gloss asc;\n"
  },
  "c956fa4511edb5e5a27aef94a615510d10b541d6a5fb33705489ebd28bb89407": {
    "describe": {
      "columns": [
        {
          "name": "paragraph_id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "id",
          "ordinal": 1,
          "type_info": "Uuid"
        },
        {
          "name": "source_text",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "simple_phonetics",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "phonemic",
          "ordinal": 4,
          "type_info": "Text"
        },
        {
          "name": "english_gloss",
          "ordinal": 5,
          "type_info": "Text"
        },
        {
          "name": "commentary",
          "ordinal": 6,
          "type_info": "Text"
        },
        {
          "name": "document_id",
          "ordinal": 7,
          "type_info": "Uuid"
        },
        {
          "name": "index_in_document",
          "ordinal": 8,
          "type_info": "Int8"
        },
        {
          "name": "page_number",
          "ordinal": 9,
          "type_info": "Text"
        },
        {
          "name": "audio_url?",
          "ordinal": 10,
          "type_info": "Text"
        },
        {
          "name": "audio_slice?",
          "ordinal": 11,
          "type_info": "Int8Range"
        },
        {
          "name": "audio_slice_id",
          "ordinal": 12,
          "type_info": "Uuid"
        },
        {
          "name": "audio_recorded_at?",
          "ordinal": 13,
          "type_info": "Date"
        },
        {
          "name": "audio_recorded_by?",
          "ordinal": 14,
          "type_info": "Uuid"
        },
        {
          "name": "audio_recorded_by_name?",
          "ordinal": 15,
          "type_info": "Text"
        },
        {
          "name": "include_audio_in_edited_collection",
          "ordinal": 16,
          "type_info": "Bool"
        },
        {
          "name": "audio_edited_by?",
          "ordinal": 17,
          "type_info": "Uuid"
        },
        {
          "name": "audio_edited_by_name?",
          "ordinal": 18,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        true,
        true,
        true,
        true,
        false,
        false,
        true,
        false,
        true,
        true,
        true,
        false,
        false,
        false,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "UuidArray"
        ]
      }
    },
    "query": "select\n  paragraph.id as paragraph_id,\n  word.id,\n  word.source_text,\n  word.simple_phonetics,\n  word.phonemic,\n  word.english_gloss,\n  word.commentary,\n  word.document_id,\n  word.index_in_document,\n  word.page_number,\n  media_resource.url as \"audio_url?\",\n  media_slice.time_range as \"audio_slice?\",\n  word.audio_slice_id,\n  media_resource.recorded_at as \"audio_recorded_at?\",\n  contributor.id as \"audio_recorded_by?\",\n  contributor.display_name as \"audio_recorded_by_name?\",\n  word.include_audio_in_edited_collection,\n  editor.id as \"audio_edited_by?\",\n  editor.display_name as \"audio_edited_by_name?\"\nfrom word\n  inner join paragraph on paragraph.page_id = word.page_id\n  left join media_slice on media_slice.id = word.audio_slice_id\n  left join media_resource on media_resource.id = media_slice.resource_id\n  left join dailp_user contributor on contributor.id = media_resource.recorded_by\n  left join dailp_user editor on editor.id = media_resource.recorded_by\nwhere paragraph.id = any($1)\n  and word.character_range is not null\n  -- Include words that overlap with the paragraph range\n  and word.character_range && paragraph.character_range\n  -- Exclude words that start before the paragraph, which means that words are\n  -- always included in the paragraph that they start in. This is the same logic\n  -- as line breaks.\n  and word.character_range &> paragraph.character_range\n-- Include all joined primary keys in the GROUP BY clause.\n-- Why? ^^\ngroup by word.id,\n  paragraph.id,\n  media_slice.id,\n  media_resource.id,\n  contributor.id,\n  editor.id\norder by word.character_range\n"
  },
  "cc4e4658101a331ab524544277099c073daf076dae5459b4bd3c7b47068a3367": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Uuid",
          "TextArray",
          "Date"
        ]
      }
    },
    "query": "update document set\n    title = \n        case\n            when $2::text[] != '{}' and $2[1] is not null then $2[1]\n            else title\n        end,\n    written_at =\n        case\n            when $3::date is not null then $3::date\n            else written_at\n        end\nwhere id = $1\n"
  },
  "cc71e3a7b4c013adc4d0cb79acd702aa0daa0290013a31e9fee3bd1f5990fa4f": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "TextArray",
          "TextArray",
          "TextArray",
          "TextArray"
        ]
      }
    },
    "query": "insert into morpheme_gloss_relation (left_gloss_id, right_gloss_id)\nselect\n  left_gloss.id,\n  right_gloss.id\nfrom\n  unnest(\n    $1::text[], $2::text[], $3::text[], $4::text[]\n  ) as input_relation(left_doc_name, left_gloss, right_doc_name, right_gloss)\n  inner join document as left_doc on left_doc.short_name = input_relation.left_doc_name\n  inner join\n    morpheme_gloss as left_gloss on\n      left_gloss.gloss = input_relation.left_gloss and left_gloss.document_id = left_doc.id\n  inner join\n    document as right_doc on right_doc.short_name = input_relation.right_doc_name\n  inner join\n    morpheme_gloss as right_gloss on\n      right_gloss.gloss = input_relation.right_gloss and right_gloss.document_id = right_doc.id\non conflict do nothing\n"
  },
  "d6377d5a54a702f7df73f287390c0c45a1309f7e705c93d49842b409a947a1fd": {
    "describe": {
      "columns": [
        {
          "name": "count",
          "ordinal": 0,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        null
      ],
      "parameters": {
        "Left": [
          "Uuid"
        ]
      }
    },
    "query": "select count(id)\nfrom word\nwhere document_id = $1\n"
  },
  "d8bc89c2d802ac2da071308eb27bdd1bc2bbdc31d64e8ccad71d4b861f8be12b": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "title",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "base_url",
          "ordinal": 2,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "UuidArray"
        ]
      }
    },
    "query": "select\n  id,\n  title,\n  base_url\nfrom iiif_source\nwhere id = any($1)\n"
  },
  "da8fe05cd8a441259c19df0ab08edafe27d11640443b4f62bc2b983485f38278": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "title",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "document_id",
          "ordinal": 2,
          "type_info": "Uuid"
        },
        {
          "name": "wordpress_id",
          "ordinal": 3,
          "type_info": "Int8"
        },
        {
          "name": "index_in_parent",
          "ordinal": 4,
          "type_info": "Int8"
        },
        {
          "name": "chapter_path",
          "ordinal": 5,
          "type_info": {
            "Custom": {
              "kind": "Simple",
              "name": "ltree"
            }
          }
        },
        {
          "name": "section: CollectionSection",
          "ordinal": 6,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "Intro",
                  "Body",
                  "Credit"
                ]
              },
              "name": "collection_section"
            }
          }
        }
      ],
      "nullable": [
        false,
        false,
        true,
        true,
        false,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "-- Select all the chapters containing this document's id.\nselect\n    c.id,\n    c.title,\n    c.document_id,\n    c.wordpress_id,\n    c.index_in_parent,\n    c.chapter_path,\n    c.section as \"section: CollectionSection\"\nfrom collection_chapter as c\n    inner join\n        (select id from document where document.short_name = $1) as d on c.document_id = d.id;"
  },
  "dd1ce7d0ae1bacb8aa1619f928cb32567dd8990345cec2d1dc793dc422fdef85": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Uuid",
          "Uuid"
        ]
      }
    },
    "query": "DELETE FROM contributor_attribution\nWHERE document_id = $1 AND contributor_id = $2;\n"
  },
  "e1ebe64b2e98a03f7803c63a2e9011b0a064d7a6819dfdbc1a8c4d4e1160db90": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Text",
          "Int8Range"
        ]
      }
    },
    "query": "with resource as (\n  insert into media_resource (url)\n  values ($1)\n  on conflict (url) do update set\n     url = excluded.url\n  returning id\n)\n\ninsert into media_slice (resource_id, time_range)\nselect\n  id,\n  $2\nfrom resource\nreturning id\n"
  },
  "e482b08ffa95a64085847ed112c22f364d725df7c552a230cd3d17782c48168d": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "title",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "document_id",
          "ordinal": 2,
          "type_info": "Uuid"
        },
        {
          "name": "wordpress_id",
          "ordinal": 3,
          "type_info": "Int8"
        },
        {
          "name": "index_in_parent",
          "ordinal": 4,
          "type_info": "Int8"
        },
        {
          "name": "chapter_path",
          "ordinal": 5,
          "type_info": {
            "Custom": {
              "kind": "Simple",
              "name": "ltree"
            }
          }
        },
        {
          "name": "section: CollectionSection",
          "ordinal": 6,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "Intro",
                  "Body",
                  "Credit"
                ]
              },
              "name": "collection_section"
            }
          }
        }
      ],
      "nullable": [
        false,
        false,
        true,
        true,
        false,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "Text",
          "Text"
        ]
      }
    },
    "query": "select\n  c.id,\n  c.title,\n  c.document_id,\n  c.wordpress_id,\n  c.index_in_parent,\n  c.chapter_path,\n  c.section as \"section: CollectionSection\"\nfrom collection_chapter as c\nwhere c.collection_slug = $1 \n  and c.slug = $2;\n"
  },
  "e48fa3267b00cc26ac5c6ab79fc7218fa6a6bcc25baec277fff3610e3c87d964": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Uuid",
          "Uuid",
          "Text"
        ]
      }
    },
    "query": "INSERT INTO contributor_attribution (document_id, contributor_id, contribution_role)\nVALUES ($1, $2, $3)\nON CONFLICT (document_id, contributor_id)\nDO UPDATE SET contribution_role = $3;"
  },
  "e5c45f7baa4a80a79be259c35cc3e54e7369970054aaad13553568d2d01c3b08": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "translation",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "index!",
          "ordinal": 2,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        false,
        false,
        null
      ],
      "parameters": {
        "Left": [
          "Uuid"
        ]
      }
    },
    "query": "-- get a paragraph by id\n-- since paragraphs always include an index within their parent document\n-- we have to count this paragraph's position in on the page\nwith all_paragraphs as (\n  select\n    id,\n    english_translation as translation,\n    ROW_NUMBER() OVER (order by character_range asc) as \"index\"\n  from paragraph\n  where page_id = (\n    select p_inner.page_id from paragraph p_inner where id = $1\n  )\n) \n\nselect\n  id,\n  translation,\n  COALESCE(index, 1) as \"index!\" -- unclear why we need to upcast this\nfrom all_paragraphs\nwhere id=$1"
  },
  "f2be609690eadbcc793760011c18927f3a51a9b661319472bbec19b5c89c6d27": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "title",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "wordpress_menu_id",
          "ordinal": 2,
          "type_info": "Int8"
        },
        {
          "name": "slug",
          "ordinal": 3,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false,
        true,
        false
      ],
      "parameters": {
        "Left": []
      }
    },
    "query": "select \n    e.id,\n    e.title,\n    e.wordpress_menu_id,\n    e.slug\nfrom edited_collection as e;"
  },
  "f86a2f62b58b5b404883e127574947027ff7a38f8ea4058a7dc4e9e68626c164": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "title",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "base_url",
          "ordinal": 2,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "select\n  id,\n  title,\n  base_url\nfrom iiif_source\nwhere title = $1\n"
  },
  "fb97bbe20200bf87afa0466d52c145bfb0647add1644fe14b9248440837cec3b": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        },
        {
          "name": "source_text",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "simple_phonetics",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "phonemic",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "english_gloss",
          "ordinal": 4,
          "type_info": "Text"
        },
        {
          "name": "commentary",
          "ordinal": 5,
          "type_info": "Text"
        },
        {
          "name": "document_id",
          "ordinal": 6,
          "type_info": "Uuid"
        },
        {
          "name": "index_in_document",
          "ordinal": 7,
          "type_info": "Int8"
        },
        {
          "name": "page_number",
          "ordinal": 8,
          "type_info": "Text"
        },
        {
          "name": "audio_recorded_at?",
          "ordinal": 9,
          "type_info": "Date"
        },
        {
          "name": "audio_url?",
          "ordinal": 10,
          "type_info": "Text"
        },
        {
          "name": "audio_slice?",
          "ordinal": 11,
          "type_info": "Int8Range"
        },
        {
          "name": "audio_slice_id?",
          "ordinal": 12,
          "type_info": "Uuid"
        },
        {
          "name": "audio_recorded_by?",
          "ordinal": 13,
          "type_info": "Uuid"
        },
        {
          "name": "audio_recorded_by_name?",
          "ordinal": 14,
          "type_info": "Text"
        },
        {
          "name": "include_audio_in_edited_collection",
          "ordinal": 15,
          "type_info": "Bool"
        },
        {
          "name": "audio_edited_by?",
          "ordinal": 16,
          "type_info": "Uuid"
        },
        {
          "name": "audio_edited_by_name?",
          "ordinal": 17,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        false,
        true,
        true,
        true,
        true,
        false,
        false,
        true,
        true,
        false,
        true,
        false,
        false,
        false,
        false,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "select\n  word.id,\n  word.source_text,\n  word.simple_phonetics,\n  word.phonemic,\n  word.english_gloss,\n  word.commentary,\n  word.document_id,\n  word.index_in_document,\n  word.page_number,\n  media_resource.recorded_at as \"audio_recorded_at?\",\n  media_resource.url as \"audio_url?\",\n  media_slice.time_range as \"audio_slice?\",\n  media_slice.id as \"audio_slice_id?\",\n  contributor.id as \"audio_recorded_by?\",\n  contributor.display_name as \"audio_recorded_by_name?\",\n  word.include_audio_in_edited_collection,\n  editor.id as \"audio_edited_by?\",\n  editor.display_name as \"audio_edited_by_name?\"\nfrom word\n  left join media_slice on media_slice.id = word.audio_slice_id\n  left join media_resource on media_resource.id = media_slice.resource_id\n  left join dailp_user contributor on contributor.id = media_resource.recorded_by\n  left join dailp_user editor on editor.id = media_resource.recorded_by\nwhere source_text ilike $1\n  or simple_phonetics ilike $1\n  or english_gloss ilike $1\n"
  },
  "fcf8a8d667e1d501a534d0c9506dbdd0ed570d5045c1f9dfdbce263c7c7ff9a7": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Uuid"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Uuid",
          "Text",
          "Uuid",
          {
            "Custom": {
              "kind": {
                "Enum": [
                  "Word",
                  "Paragraph"
                ]
              },
              "name": "comment_parent_type"
            }
          },
          {
            "Custom": {
              "kind": {
                "Enum": [
                  "Story",
                  "Suggestion",
                  "Question"
                ]
              },
              "name": "comment_type_enum"
            }
          }
        ]
      }
    },
    "query": "-- Insert a new comment from a user\ninsert into comment (posted_at, posted_by, text_content, parent_id, parent_type, comment_type)\nvalues (now(), $1, $2, $3, $4, $5)\nreturning id"
  }
}