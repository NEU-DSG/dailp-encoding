{
  "db_name": "PostgreSQL",
  "query": "insert into word_segment (gloss_id, word_id, index_in_word, morpheme, role)\n-- Fill in glosses that weren't inserted with their global match.\nselect\n  coalesce(inserted_gloss.id, global_gloss.id),\n  word_id,\n  index,\n  morpheme,\n  role\nfrom\n  unnest(\n    $1::uuid[], $2::text[], $3::uuid[], $4::bigint[], $5::text[], $6::word_segment_role[]\n  ) as input_data(document_id, gloss, word_id, index, morpheme, role)\n  left join\n    morpheme_gloss as inserted_gloss on\n      inserted_gloss.document_id = input_data.document_id and inserted_gloss.gloss = input_data.gloss\n  left join\n    morpheme_gloss as global_gloss on\n      global_gloss.document_id is null and global_gloss.gloss = input_data.gloss\non conflict (word_id, index_in_word)\ndo update set\nmorpheme = excluded.morpheme,\ngloss_id = excluded.gloss_id,\nrole = excluded.role\n",
  "describe": {
    "columns": [],
    "parameters": {
      "Left": [
        "UuidArray",
        "TextArray",
        "UuidArray",
        "Int8Array",
        "TextArray",
        {
          "Custom": {
            "name": "_word_segment_role",
            "kind": {
              "Array": {
                "Custom": {
                  "name": "word_segment_role",
                  "kind": {
                    "Enum": [
                      "Morpheme",
                      "Clitic",
                      "Modifier"
                    ]
                  }
                }
              }
            }
          }
        }
      ]
    },
    "nullable": []
  },
  "hash": "73409561936ce0fa2234c9b37c12419fd61bed4d25a4a87599bbf646b80c7d9f"
}
