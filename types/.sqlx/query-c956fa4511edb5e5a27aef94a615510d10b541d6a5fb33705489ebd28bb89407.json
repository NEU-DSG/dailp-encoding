{
  "db_name": "PostgreSQL",
  "query": "select\n  paragraph.id as paragraph_id,\n  word.id,\n  word.source_text,\n  word.simple_phonetics,\n  word.phonemic,\n  word.english_gloss,\n  word.commentary,\n  word.document_id,\n  word.index_in_document,\n  word.page_number,\n  media_resource.url as \"audio_url?\",\n  media_slice.time_range as \"audio_slice?\",\n  word.audio_slice_id,\n  media_resource.recorded_at as \"audio_recorded_at?\",\n  contributor.id as \"audio_recorded_by?\",\n  contributor.display_name as \"audio_recorded_by_name?\",\n  word.include_audio_in_edited_collection,\n  editor.id as \"audio_edited_by?\",\n  editor.display_name as \"audio_edited_by_name?\"\nfrom word\n  inner join paragraph on paragraph.page_id = word.page_id\n  left join media_slice on media_slice.id = word.audio_slice_id\n  left join media_resource on media_resource.id = media_slice.resource_id\n  left join dailp_user contributor on contributor.id = media_resource.recorded_by\n  left join dailp_user editor on editor.id = media_resource.recorded_by\nwhere paragraph.id = any($1)\n  and word.character_range is not null\n  -- Include words that overlap with the paragraph range\n  and word.character_range && paragraph.character_range\n  -- Exclude words that start before the paragraph, which means that words are\n  -- always included in the paragraph that they start in. This is the same logic\n  -- as line breaks.\n  and word.character_range &> paragraph.character_range\n-- Include all joined primary keys in the GROUP BY clause.\n-- Why? ^^\ngroup by word.id,\n  paragraph.id,\n  media_slice.id,\n  media_resource.id,\n  contributor.id,\n  editor.id\norder by word.character_range\n",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "paragraph_id",
        "type_info": "Uuid"
      },
      {
        "ordinal": 1,
        "name": "id",
        "type_info": "Uuid"
      },
      {
        "ordinal": 2,
        "name": "source_text",
        "type_info": "Text"
      },
      {
        "ordinal": 3,
        "name": "simple_phonetics",
        "type_info": "Text"
      },
      {
        "ordinal": 4,
        "name": "phonemic",
        "type_info": "Text"
      },
      {
        "ordinal": 5,
        "name": "english_gloss",
        "type_info": "Text"
      },
      {
        "ordinal": 6,
        "name": "commentary",
        "type_info": "Text"
      },
      {
        "ordinal": 7,
        "name": "document_id",
        "type_info": "Uuid"
      },
      {
        "ordinal": 8,
        "name": "index_in_document",
        "type_info": "Int8"
      },
      {
        "ordinal": 9,
        "name": "page_number",
        "type_info": "Text"
      },
      {
        "ordinal": 10,
        "name": "audio_url?",
        "type_info": "Text"
      },
      {
        "ordinal": 11,
        "name": "audio_slice?",
        "type_info": "Int8Range"
      },
      {
        "ordinal": 12,
        "name": "audio_slice_id",
        "type_info": "Uuid"
      },
      {
        "ordinal": 13,
        "name": "audio_recorded_at?",
        "type_info": "Date"
      },
      {
        "ordinal": 14,
        "name": "audio_recorded_by?",
        "type_info": "Uuid"
      },
      {
        "ordinal": 15,
        "name": "audio_recorded_by_name?",
        "type_info": "Text"
      },
      {
        "ordinal": 16,
        "name": "include_audio_in_edited_collection",
        "type_info": "Bool"
      },
      {
        "ordinal": 17,
        "name": "audio_edited_by?",
        "type_info": "Uuid"
      },
      {
        "ordinal": 18,
        "name": "audio_edited_by_name?",
        "type_info": "Text"
      }
    ],
    "parameters": {
      "Left": [
        "UuidArray"
      ]
    },
    "nullable": [
      false,
      false,
      false,
      true,
      true,
      true,
      true,
      false,
      false,
      true,
      false,
      true,
      true,
      true,
      false,
      false,
      false,
      false,
      false
    ]
  },
  "hash": "c956fa4511edb5e5a27aef94a615510d10b541d6a5fb33705489ebd28bb89407"
}
